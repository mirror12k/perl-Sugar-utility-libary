


class Sugar::Lang::SugarsweetCompiler::Perl extends Sugar::Lang::SugarsweetBaseCompiler {

# code file
list sub code_file_preamble() {
	return [
		"#!/usr/bin/env perl",
		"use strict;",
		"use warnings;",
		"use feature 'say';",
		""
	];
}

list sub code_file_postamble() {
	return [
		"",
		"1;",
		""
	];
}

# class
list sub code_class_preamble(tree class_tree) {
	string class_name = join '::', class_tree.name;
	list code = [];
	push code, "package $class_name;";

	if (class_tree.parent_name) {
		string parent_name = join '::', class_tree.parent_name;
		push code, "use parent '$parent_name';";
	}

	push code, "";

	return code;
}

list sub code_class_postamble(tree class_tree) {
	return [];
}

# constructors
list sub code_constructor_preamble(tree function_tree) {
	list code = [];
	push code, "sub new {";

	if (0 < list length function_tree.argument_list) {
		string argument_list = self.compile_argument_list(function_tree.argument_list);
		push code, "\tmy ($argument_list) = \@_;";
	}

	if (self.current_class_tree.parent_name) {
		push code, "\t\$self = \$self->SUPER::new(\@_[1 .. \$#_]);";
	} else {
		push code, "\t\$self = bless {}, \$self;";
	}

	return code;
}

list sub code_constructor_postamble(tree function_tree) {
	return [
		"\treturn \$self;",
		"}",
		""
	];
}

# functions
list sub code_function_preamble(tree function_tree) {
	list code = [];
	push code, "sub $function_tree.name {";

	if (0 < list length function_tree.argument_list) {
		string argument_list = self.compile_argument_list(function_tree.argument_list);
		push code, "\tmy ($argument_list) = \@_;";
	}

	return code;
}

list sub code_function_postamble(tree function_tree) {
	return [
		"}",
		""
	];
}

# native function
bool sub is_my_native_function(tree function_tree) {
	return function_tree.native_type == 'perl5';
}

list sub compile_native_function(tree function_tree) {
	list code = [];
	push code, "sub $function_tree.name {";

	if (0 < list length function_tree.argument_list) {
		string argument_list = self.compile_argument_list(function_tree.argument_list);
		push code, "\tmy ($argument_list) = \@_;";
	}

	if (function_tree.block =~ /\A\{\{(.*?)\}\}\Z/s) {
		push code, match[1];
	} else {
		die "failed to compile native block: $function_tree.block";
	}

	push code, "}";
	push code, "";

	if (function_tree.name == 'main') {
		push code, 'caller or main(\@ARGV);';
		push code, '';
	}

	return code;
}

list sub compile_statement(tree statement) {
	list code = [];

	string switch (statement.type) {
		"foreach_statement": {
			string expression = self.compile_expression(statement.expression);
			push code, "foreach my \$$statement.identifier (\@{$expression}) {";
			list push code, self.compile_statements_block(statement.block, [ statement ]);
			push code, "}";
		}
		"switch_statement": {
			string expression = self.compile_expression(statement.expression);
			list match_blocks = grep { _.type == 'match_switch_block' } statement.block;
			list default_blocks = grep { _.type == 'default_switch_block' } statement.block;

			if (1 < length default_blocks) {
				die "more than one default case defined";
			}
			if (0 >= length match_blocks) {
				die "at least one match case is required";
			}

			string prefix = '';
			foreach  (tree case in match_blocks) {
				list expression_list_strings;
				foreach  (tree match_case in case.case_list) {
					string switch (match_case.type) {
						"integer_case": {
							push expression_list_strings, "($expression == $match_case.value)";
						}
						"string_case": {
							push expression_list_strings, "($expression eq $match_case.value)";
						}
						default: {
							die "unimplemented: $match_case.type";
						}
					}
				}
				string expression_list = join ' or ', expression_list_strings;
				push code, "${prefix}if ($expression_list) {";
				# push code, "${prefix}if ($expression eq $case.value) {";
				list push code, self.compile_statements_block(case.block, []);

				prefix = "} els";
			}
			foreach  (tree case in default_blocks) {
				push code, "} else {";
				list push code, self.compile_statements_block(case.block, []);
			}
			push code, "}";
		}
		"if_statement": {
			string expression = self.compile_expression(statement.expression);

			string prefix = '';
			push code, "${prefix}if ($expression) {";
			list push code, self.compile_statements_block(statement.block, []);

			if (contains statement.branch) {
				tree branch = statement.branch;
				while (branch) {
					if (branch.type == 'elsif_statement') {
						string expression = self.compile_expression(branch.expression);
						push code, "} elsif ($expression) {";
						list push code, self.compile_statements_block(branch.block, []);
					} else {
						push code, "} else {";
						list push code, self.compile_statements_block(branch.block, []);
					}
					branch = branch.branch;
				}
			}
			push code, "}";
		}
		"while_statement": {
			string expression = self.compile_expression(statement.expression);

			string prefix = '';
			push code, "while ($expression) {";
			list push code, self.compile_statements_block(statement.block, []);
			push code, "}";
		}
		'void_return_statement': {
			push code, "return;";
		}
		'return_statement': {
			string expression = self.compile_expression(statement.expression);
			push code, "return $expression;";
		}
		'list_push_statement': {
			string left_expression = self.compile_expression(statement.left_expression);
			string right_expression = self.compile_expression(statement.right_expression);
			push code, "push \@{$left_expression}, \@{$right_expression};";
		}
		'push_statement': {
			string left_expression = self.compile_expression(statement.left_expression);
			string right_expression = self.compile_expression(statement.right_expression);
			push code, "push \@{$left_expression}, $right_expression;";
		}
		'die_statement': {
			string expression = self.compile_expression(statement.expression);
			push code, "die $expression;";
		}
		'print_statement': {
			string expression = self.compile_expression(statement.expression);
			push code, "say $expression;";
		}
		'variable_declaration_statement': {
			self.variable_scope[statement.identifier] = statement.variable_type;
			push code, "my \$$statement.identifier;";
		}
		'variable_assignment_statement': {
			string expression = self.compile_expression(statement.expression);
			push code, "\$$statement.identifier = $expression;";
		}
		'variable_declaration_assignment_statement': {
			self.variable_scope[statement.identifier] = statement.variable_type;
			string expression = self.compile_expression(statement.expression);
			push code, "my \$$statement.identifier = $expression;";
		}
		'expression_statement': {
			string expression = self.compile_expression(statement.expression);
			push code, "$expression;";
		}
		default: {
			die "invalid statement type: $statement.type";
		}
	}

	return code;
}




string sub compile_expression (tree expression) {

	string switch (expression.type) {
		'string_expression': {
			return self.compile_string_expression(expression.value);
		}
		'integer_expression': {
			return expression.value;
		}
		'variable_expression': {
			unless (contains self.variable_scope[expression.identifier]) {
				die "undefined variable referenced: $expression.identifier";
			}
			return "\$$expression.identifier";
		}
		'match_index_expression': {
			if (expression.index < 0) {
				die "match index cannot be negative";
			}
			return "\$$expression.index";
		}
		'match_position_expression': {
			return "\$+[0]";
		}
		'empty_list_expression': {
			return "[]";
		}
		'empty_tree_expression': {
			return "{}";
		}
		'list_constructor_expression': {
			string expression_list = self.compile_expression_list(expression.expression_list);
			return "[ $expression_list ]";
		}
		'tree_constructor_expression': {
			string expression_list = self.compile_tree_constructor(expression.expression_list);
			return "{ $expression_list }";
		}
		'not_expression': {
			string sub_expression = self.compile_expression(expression.expression);
			return "not ($sub_expression)";
		}
		'join_expression': {
			string left_expression = self.compile_expression(expression.left_expression);
			string right_expression = self.compile_expression(expression.right_expression);
			return "join($left_expression, \@{$right_expression})";
		}
		'split_expression': {
			string left_expression = self.compile_expression(expression.left_expression);
			string right_expression = self.compile_expression(expression.right_expression);
			return "[ split(quotemeta($left_expression), $right_expression) ]";
		}
		'flatten_expression': {
			string sub_expression = self.compile_expression(expression.expression);
			return "[ map \@\$_, \@{$sub_expression} ]";
		}
		'map_expression': {
			string left_expression = self.compile_expression_with_variables(expression.left_expression, [{
					variable_type => '*',
					identifier => '_',
				}]);
			string right_expression = self.compile_expression(expression.right_expression);
			return "[ map { $left_expression } \@{$right_expression} ]";
		}
		'grep_expression': {
			string left_expression = self.compile_expression_with_variables(expression.left_expression, [{
					variable_type => '*',
					identifier => '_',
				}]);
			string right_expression = self.compile_expression(expression.right_expression);
			return "[ grep { $left_expression } \@{$right_expression} ]";
		}
		'length_expression': {
			string expression_type;
			if (contains expression.static_type) {
				expression_type = expression.static_type;
			} else {
				expression_type = self.get_expression_type(expression.expression);
			}
			unless (expression_type) {
				die "ambiguous type length expression";
			}
			string sub_expression = self.compile_expression(expression.expression);
			if (expression_type == 'string') {
				return "length($sub_expression)";
			} elsif (expression_type == 'list') {
				return "scalar(\@{$sub_expression})";
			} else {
				die "invalid value type for length expression: '$expression_type'";
			}
		}
		'pop_expression': {
			string sub_expression = self.compile_expression(expression.expression);
			return "pop(\@{$sub_expression})";
		}
		'shift_expression': {
			string sub_expression = self.compile_expression(expression.expression);
			return "shift(\@{$sub_expression})";
		}
		'contains_expression': {
			string switch (expression.expression.type) {
				'access_expression':
				'expression_access_expression': {}
				default: {
					die "invalid expression for contains expression: $expression.expression.type";
				}
			}
			string sub_expression = self.compile_expression(expression.expression);
			return "exists($sub_expression)";
		}
		'clone_expression': {
			string expression_type = self.get_expression_type(expression.expression);
			unless (expression_type) {
				die "ambiguous type clone expression";
			}
			string sub_expression = self.compile_expression(expression.expression);
			if (expression_type == 'tree') {
				return "{ \%{$sub_expression} }";
			} elsif (expression_type == 'list') {
				return "[ \@{$sub_expression} ]";
			} else {
				die "invalid value type for clone expression: '$expression_type'";
			}
		}
		'assignment_expression': {
			string left_expression = self.compile_expression(expression.left_expression);
			string right_expression = self.compile_expression(expression.right_expression);
			return "$left_expression = $right_expression";
		}
		'addition_assignment_expression': {
			string expression_type = self.infer_expression_type(expression);
			unless (expression_type) {
				die "ambiguous type addition assignment expression";
			}

			string left_expression = self.compile_expression(expression.left_expression);
			string right_expression = self.compile_expression(expression.right_expression);

			if (expression_type == 'string') {
				return "$left_expression .= $right_expression";
			} elsif (expression_type == 'int') {
				return "$left_expression += $right_expression";
			} else {
				die "invalid expression type for addition assignment: $expression_type";
			}
		}
		'access_expression': {
			string sub_expression = self.compile_expression(expression.expression);
			return "$sub_expression\->{$expression.identifier}";
		}
		'expression_access_expression': {
			string left_expression = self.compile_expression(expression.left_expression);
			string right_expression = self.compile_expression(expression.right_expression);
			return "$left_expression\->{$right_expression}";
		}
		'access_call_expression': {
			string sub_expression = self.compile_expression(expression.expression);
			string expression_list = self.compile_expression_list(expression.expression_list);
			return "$sub_expression\->$expression.identifier\($expression_list)";
		}
		'call_expression': {
			string sub_expression = self.compile_expression(expression.expression);
			string expression_list = self.compile_expression_list(expression.expression_list);
			return "$sub_expression\->($expression_list)";
		}
		'object_assignment_expression': {
			string left_expression = self.compile_expression(expression.left_expression);
			string right_expression = self.compile_expression(expression.right_expression);
			return "$left_expression\->{$expression.identifier} = $right_expression";
		}
		'numeric_comparison_expression': {
			string left_expression = self.compile_expression(expression.left_expression);
			string right_expression = self.compile_expression(expression.right_expression);
			return "($left_expression $expression.operator $right_expression)";
		}
		'comparison_expression': {
			string expression_type = self.infer_expression_type(expression);

			string left_expression = self.compile_expression(expression.left_expression);
			string right_expression = self.compile_expression(expression.right_expression);
			if (expression_type == 'string') {
				string operator;
				if (expression.operator == '==') {
					operator = 'eq';
				} else {
					operator = 'ne';
				}
				return "($left_expression $operator $right_expression)";
			} else {
				return "($left_expression $expression.operator $right_expression)";
			}
		}
		'regex_match_expression': {
			string sub_expression = self.compile_expression(expression.expression);
			return "($sub_expression $expression.operator $expression.regex)";
		}
		'regex_substitution_expression': {
			string sub_expression = self.compile_expression(expression.expression);
			string regex_expression = self.compile_substitution_expression(expression.regex);
			return "($sub_expression =~ $regex_expression)";
		}
		default: {
			die "invalid expression type: $expression.type";
		}
	}
}

string sub compile_substitution_expression (string regex_token) {
	# my ($self, $string) = @_;

	if (regex_token =~ /\As\/((?:[^\\\/]|\\.)*+)\/((?:[^\\\/]|\\.)*+)\/([msixpodualngc]*+)\Z/s) {
		string regex = match[1];
		string substitution_string = match[2];
		string flags = match[3];

		substitution_string = self.compile_string_expression(substitution_string);

		return "s/$regex/$substitution_string/${flags}r";
	} else {
		die "failed to compile substitution expression: $regex_token";
	}
}

string sub compile_string_expression (string string_token) {
	# my ($self, $string) = @_;

	string string_content;
	bool is_quoted;
	if (string_token =~ /\A'/s) {
		return string_token;
		# return $string;
	} elsif (string_token =~ /\A"(.*)"\Z/s) {
		string_content = match[1];
		is_quoted = 1;
	} else {
		string_content = string_token;
		is_quoted = 0;
	}
	
	if (string_content == '') {
		return string_token;
	}
	# return $string if $string eq '""';
	# my $string_content = $1;
	# my $compiled_string = '';

	string compiled_string = '';

	int last_match_position = 0;
	while (string_content =~ /\G(?:((?:[^\$\\]|\\.)+)|\$(\d+)|\$(\w+)(?:\.(\w+(?:\.\w+)*))?|\$\{(\w+)(?:\.(\w+(?:\.\w+)*))?\})/gsc) {
		# my ($text_match, $variable_match, $variable_access, $protected_variable_match,
		# 		$protected_variable_access) = ($1, $2, $3, $4, $5);
		string text_match = match[1];
		string match_variable_match = match[2];
		string variable_match = match[3];
		string variable_access = match[4];
		string protected_variable_match = match[5];
		string protected_variable_access = match[6];
		last_match_position = match.pos;

		if (text_match) {
			compiled_string += text_match;
		} elsif	(match_variable_match) {
			compiled_string += "\$$match_variable_match";
		} elsif	(variable_match) {
			unless (contains self.variable_scope[variable_match]) {
				die "undefined variable in string interpolation: $variable_match";
			}

			if (variable_access) {
				compiled_string += "\$$variable_match\->";
				compiled_string += join '', map { "{$_}" } split ".", variable_access;
			} else {
				compiled_string += "\$$variable_match";
			}
		} else {
			unless (contains self.variable_scope[protected_variable_match]) {
				die "undefined variable in string interpolation: $protected_variable_match";
			}
			if (protected_variable_access) {
				compiled_string += "\$$protected_variable_match\->";
				compiled_string += join '', map { "{$_}" } split ".", protected_variable_access;
			} else {
				compiled_string += "\${$protected_variable_match}";
			}
		}
	}

	if (last_match_position < length string_content) {
		die "failed to compile string expression: $string_token";
	}
	# warn "debug string content for $string: ", pos($string_content) if defined pos ($string_content);
	# die "failed to compile string expression: $string" if not defined pos ($string_content);

	if (is_quoted) {
		return "\"$compiled_string\"";
	} else {
		return compiled_string;
	}
}

string sub compile_argument_list (list argument_list) {
	return join ', ', map { "\$$_.identifier" } argument_list;
}

string sub compile_expression_list (list expression_list) {
	return join ', ', map { self.compile_expression(_) } expression_list;
}

string sub compile_tree_constructor (list tree_constructor_list) {
	list pairs = [];
	list items = clone tree_constructor_list;
	while (0 < length items) {
		string key = shift items;
		string expression = self.compile_expression(shift items);
		push pairs, self.compile_tree_constructor_pair(key, expression);
	}
	return join ', ', pairs;
}

string sub compile_tree_constructor_pair(string key, string expression) {
	return "$key => ($expression)";
}

# main
void sub main () native:perl5 {{
	my ($files_list) = @_;

	# require Data::Dumper;
	require Sugar::IO::File;
	use Sugar::Lang::SugarsweetParser;

	my $parser = Sugar::Lang::SugarsweetParser->new;
	my $compiler = __PACKAGE__->new;
	foreach my $file (@$files_list) {
		$parser->{filepath} = Sugar::IO::File->new($file);
		my $tree = $parser->parse;
		# say Dumper $tree;

		say $compiler->compile_file($tree);
	}
}}

}

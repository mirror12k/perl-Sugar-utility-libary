# Sugar grammar language parser
package Sugar::Lang::GrammarCompiler

# regex definitions
symbol_regex = /\{|\}|\[|\]|->|=>|=|,/

package_identifier_regex = /[a-zA-Z_][a-zA-Z0-9_]*+(\:\:[a-zA-Z_][a-zA-Z0-9_]*+)++/
identifier_regex = /[a-zA-Z_][a-zA-Z0-9_]*+/
string_regex = /'([^\\']|\\[\\'])*+'/s
regex_regex = /\/([^\\\/]|\\.)*+\/[msixpodualn]*/s
variable_regex = /\$\w++/
context_reference_regex = /!\w++/

comment_regex = /\#[^\n]*+\n/s
whitespace_regex = /\s++/s

# tokens specified to the token parser
tokens {
	symbol => $symbol_regex

	package_identifier => $package_identifier_regex
	identifier => $identifier_regex
	string => $string_regex
	regex => $regex_regex
	variable => $variable_regex
	context_reference => $context_reference_regex

	comment => $comment_regex
	whitespace => $whitespace_regex
}

# tokens that will get filtered off
ignored_tokens {
	comment
	whitespace
}

# context definitions
object context root {
	$identifier_regex, '=' {
		assign {
			'variables'{$0} => !def_value
		}
	}
	'package', $package_identifier_regex {
		assign {
			'package_identifier' => $1
		}
	}
	'tokens', '{' {
		assign {
			'tokens' => [ !token_definition ]
		}
	}
	'ignored_tokens', '{' {
		assign {
			'ignored_tokens' => [ !ignored_tokens_list ]
		}
	}
	'context', $identifier_regex, '{' {
		assign {
			'contexts'{$1} => [ !context_definition ]
		}
	}
	'object', 'context', $identifier_regex, '{' {
		assign {
			'object_contexts'{$2} => [ !context_definition ]
		}
	}
}

context def_value {
	$string_regex {
		spawn $0
		return
	}
	$regex_regex {
		spawn $0
		return
	}
	$variable_regex {
		spawn $0
		return
	}
	default {
		die 'unexpected token in def_value'
	}
}

context token_definition {
	'}' {
		return
	}
	$identifier_regex, '=>' {
		spawn $0
		spawn !def_value
	}
	default {
		die 'unexpected token in token_definition'
	}
}

context ignored_tokens_list {
	'}' {
		return
	}
	$identifier_regex {
		spawn $0
	}
	default {
		die 'unexpected token in ignored_tokens_list'
	}
}

context context_definition {
	'}' {
		return
	}
	'default', '{' {
		spawn undef
		spawn [ !match_action ]
	}
	default {
		spawn [ !match_list ]
		match '{'
		spawn [ !match_action ]
	}
}

context match_list {
	$variable_regex, ',' {
		spawn $0
	}
	$variable_regex {
		spawn $0
		return
	}
	$regex_regex, ',' {
		spawn $0
	}
	$regex_regex {
		spawn $0
		return
	}
	$string_regex, ',' {
		spawn $0
	}
	$string_regex {
		spawn $0
		return
	}
	default {
		die 'unexpected end of match list'
	}
}

context match_action {
	'assign', '{' {
		spawn 'assign'
		spawn [ !assign_scope ]
	}
	'spawn' {
		spawn 'spawn'
		spawn !spawn_expression
	}
	'respawn' {
		spawn 'respawn'
		spawn !spawn_expression
	}
	'return' {
		spawn 'return'
	}
	'match' {
		spawn 'match'
		spawn [ !match_list ]
	}
	'warn', $string_regex {
		spawn 'warn'
		spawn $1
	}
	'die', $string_regex {
		spawn 'die'
		spawn $1
	}
	'}' {
		return
	}
	default {
		die 'expected \'}\' to close match actions list'
	}
}

context spawn_expression {
	/\$\d++/ {
		spawn $0
		return
	}
	'$_' {
		spawn $0
		return
	}
	$context_reference_regex, '->' {
		spawn {
			$0 => !spawn_expression
		}
		# spawn '->'
		# spawn !spawn_expression
		return
	}
	$context_reference_regex {
		spawn $0
		return
	}
	$string_regex {
		spawn $0
		return
	}
	'undef' {
		spawn undef
		return
	}
	'[', ']' {
		spawn []
		return
	}
	'{', '}' {
		spawn {}
		return
	}
	'[' {
		spawn [ !spawn_expression_list ]
		return
	}
	'{' {
		spawn [ !spawn_expression_hash ]
		return
	}
	default {
		die 'spawn expression expected'
	}
}

context spawn_expression_list {
	$context_reference_regex, ']' {
		spawn $0
		return
	}
	default {
		die 'spawn expression list expected'
	}
}

context spawn_expression_hash {
	'}' {
		return
	}
	$variable_regex, '=>' {
		spawn $0
		spawn !spawn_expression
	}
	$string_regex, '=>' {
		spawn $0
		spawn !spawn_expression
	}
	default {
		die 'spawn expression hash pair expected'
	}
}

context assign_scope {
	$string_regex, '=>' {
		spawn $0
		spawn !spawn_expression
	}
	$string_regex, '[', ']', '=>' {
		spawn $0
		spawn []
		spawn !spawn_expression
	}
	$string_regex, '{' {
		spawn $0
		spawn {}
		spawn !spawn_expression
		match '}', '=>'
		spawn !spawn_expression
	}
	'}' {
		return
	}
	default {
		die 'assign expression expected'
	}
}

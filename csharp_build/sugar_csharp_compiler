
class Sugar::Lang::SugarGrammarCSharpCompiler {

sub _constructor (tree args) {
	# my ($class, %opts) = @_;
	# my $self = bless {}, $class;

	if (contains args.syntax_definition_intermediate) {
		self.load_syntax_definition_intermediate(args.syntax_definition_intermediate);
	} else {
		# TODO: croak
		die "syntax_definition_intermediate argument required for Sugar::Lang::SugarGrammarCompiler";
	}
}

void sub load_syntax_definition_intermediate (tree intermediate) {
	self.syntax_definition_intermediate = intermediate;

	self.global_variable_names = self.syntax_definition_intermediate.global_variable_names;
	self.global_variable_expressions = self.syntax_definition_intermediate.global_variable_expressions;
	self.variables_scope = { '$_' => 'context_value', '#tokens' => 'tokens0' };
	self.tokens_scope_index = 0;
	self.token_definitions = [];
	self.ignored_tokens = self.syntax_definition_intermediate.ignored_tokens;
	self.contexts = self.syntax_definition_intermediate.contexts;
	self.contexts_by_name = self.syntax_definition_intermediate.contexts_by_name;
	self.subroutines = self.syntax_definition_intermediate.subroutines;
	self.code_definitions = {};

	# TODO: // expression
	if (contains self.syntax_definition_intermediate.package_identifier) {
		self.package_identifier = self.syntax_definition_intermediate.package_identifier;
	} else {
		self.package_identifier = 'PACKAGE_NAME';
	}
}

string sub to_package () {

	string code = '';
	# my $code = '';

	list package_pieces = split '::', self.package_identifier;

	list namespace_pieces = [];
	string last_piece = "";

	foreach (string piece in package_pieces) {
		if (last_piece != "") {
			push namespace_pieces, last_piece;
		}
		last_piece = piece;
	}

	string class_name = last_piece;

	code += "
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

using Sugar.Lang;


";

	if (0 < length namespace_pieces) {
		string class_namespace = join '.', namespace_pieces;
		code += "
namespace $class_namespace {
";
	}

		code += "
public class $class_name : Sugar.Lang.BaseSyntaxParser {
";


	code += "\n\n//////////////////////////////\n///// variables and settings\n//////////////////////////////\n\n";


	if (0 < list length self.global_variable_names) {
		foreach (string key in self.global_variable_names) {
			string value = self.global_variable_expressions[key];

			code += "\tpublic static $value.type var_$key = $value.value;\n";
		}
	}
	code += "\n\n";

	code += "\tpublic static List<string> grammar_tokens = new List<string> {\n";
	if (0 < list length self.token_definitions) {
		foreach (tree token_definition in self.token_definitions) {
			code += "\t\t\"$token_definition.key\", $token_definition.value,\n";
		}
	}
	code += "\t};\n\n";

	code += "\tpublic static List<string> grammar_ignored_tokens = new List<string> {\n";
	foreach (string token in self.ignored_tokens) {
		code += "\t\t\"$token\",\n";
	}
	code += "\t};\n\n";

	# contexts is a legacy variable map of pointers to functions...
	# code += "our \$contexts = {\n";
	# foreach (tree context in self.contexts) {
	# 	code += "\t$context.identifier => 'context_$context.identifier',\n";
	# }
	# code += "};\n\n";

	code += "\n\n//////////////////////////////\n///// api\n//////////////////////////////\n\n";

	code += "

\tpublic $class_name () : base(\"\", \"\", grammar_tokens, grammar_ignored_tokens) {}

\t// Parse is also part of the api, but no point in overriding it
\t// public override Object Parse();

";

	# $opts{token_regexes} = $tokens;
	# $opts{ignored_tokens} = $ignored_tokens;
	# $opts{contexts} = $contexts;

	# my $self = $class->SUPER::new(%opts);

	# return $self

# sub parse {
# 	my ($self, @args) = @_;
# 	return $self->SUPER::parse(@args)
# }

	code += "\n\n//////////////////////////////\n///// sugar contexts functions\n//////////////////////////////\n\n";

	foreach (tree context in self.contexts) {
		code += self.code_definitions[context.identifier];
		# my $identifier = $context->{identifier};
		# code += $self->{code_definitions}{$identifier} =~ s/\A(\s*)sub \{/$1sub context_$identifier {/r;
	}

	# native perl functions are unsupported in csharp
	# code += "\n\n//////////////////////////////\n///// native perl functions\n//////////////////////////////\n\n";

	# foreach (tree subroutine in self.subroutines) {
	# 	string subroutine_code = subroutine.code_block;
	# 	# todo: match index variables in string substitution
	# 	subroutine_code = subroutine_code =~ s/\A\{\{(.*)\}\}\Z/{$1}/s;
	# 	code += "sub $subroutine.identifier $subroutine_code\n\n";

	# 	code += "caller or main(\@ARGV);\n\n" if subroutine.identifier == 'main';
	# }

	# code += "\n\n1;\n\n";


		code += "
}
";

	if (0 < length namespace_pieces) {
		code += "
}
";
	}

	return code;
}

void sub confess_at_current_line (string msg) {
	die "syntax error on line $self.current_line: $msg";
}

string sub get_variable (string variable) {
	self.confess_at_current_line("undefined variable requested: '$variable'")
			unless contains self.variables_scope[variable];
	return self.variables_scope[variable];
}

bool sub exists_variable (string variable) {
	# my ($self, $variable) = @_;
	return contains self.variables_scope[variable];
}

string sub add_variable (string variable) {
	if (variable =~ /\A\$(\w+)\Z/s) {
		self.variables_scope[variable] = "var_$1";
		return self.variables_scope[variable];
	} else {
		self.confess_at_current_line("invalid variable in add_variable: '$variable'");
	}
}

string sub get_function_by_name (string name) {
	if (name =~ /\A\!(\w++)\Z/) {
		string context_identifier = match[1];
		if (contains self.contexts_by_name[context_identifier]) {
			return "context_$context_identifier";
		} else {
			self.confess_at_current_line("undefined context requested: '$context_identifier'");
		}

	} elsif (name =~ /\A\&(\w++)\Z/) {
		return "$1";

	} else {
		self.confess_at_current_line("unknown context type requested: '$name'");
	}
}

void sub compile_syntax_intermediate () {
	foreach (string key in self.global_variable_names) {
		string value = self.compile_syntax_token_value(self.global_variable_expressions[key]);
		string value_type = 'string';
		if (self.global_variable_expressions[key].type == 'substitution_regex_value') {
			value_type = 'Func<string, string>';
		}

		self.global_variable_expressions[key] = {
			type => value_type,
			value => value,
		};
		self.variables_scope["\$$key"] = "var_$key";
	}

	foreach (tree token_definition in self.syntax_definition_intermediate.tokens) {
		string key = token_definition.identifier;
		string value = self.compile_syntax_token_value(token_definition.value);
		push self.token_definitions, {
			key => key,
			value => value,
		};
	}
	
	foreach (tree context in self.syntax_definition_intermediate.contexts) {
		self.code_definitions[context.identifier] = self.compile_syntax_context(context);
	}
}

string sub compile_syntax_token_value(tree value) {
	string switch (value.type) {
		'regex_value': {
			# TODO: fix
			if (value.value =~ /\A\/(.*)\/([msixpodualn]*)\Z/s) {
				return "\@\"(?$2:$1)\"";
			} else {
				self.confess_at_current_line("failed to parse syntax regex value: $value.value");
			}
		}
		'substitution_regex_value': {
			if (value.value =~ /\As\/(.*)\/(.*)\/([msixpodualn]*)\Z/s) {
				return "(s) => Regex.Replace(s, @\"(?$3:$1)\", \"$2\")";
			} else {
				self.confess_at_current_line("failed to parse syntax substitution regex value: $value.value");
			}
			# self.confess_at_current_line("substitution_regex currently unimplemented in csharp compiler");
		}
		'variable_value': {
			return self.get_variable(value.value);
		}
		'string_value': {
			# TODO: fix strings
			return value.value;
		}
		default: {
			self.confess_at_current_line("invalid syntax token value: $value.type");
		}
	}
}

string sub compile_syntax_context (tree context) {

	self.current_context = context;

	bool is_linear_context = 0;
	tree last_action;
	foreach (tree action in context.block) {
		last_action = action;
	}

	if (last_action) {
		if (last_action.type == 'return_statement') {
			is_linear_context = 1;
		} elsif (last_action.type == 'return_expression_statement') {
			is_linear_context = 1;
		}
	}

	list code = [];

	# list args_list = [];
	# push args_list, '$self';
	# if (context.identifier != 'root') {
	# 	push args_list, '$context_value';
	# }
	# push code, "my ($args_list_string) = \@_;";

	string context_object_type = 'DynamicValue';
	# if (context.type == 'object_context') {
	# 	context_object_type = "Dictionary<string, Object>";
	# } elsif (context.type == 'list_context') {
	# 	context_object_type = "List<Object>";
	# } else {
	# 	context_object_type = "Object";
	# }
	# push args_list, "$context_object_type context_value";
	# string args_list_string = join ', ', args_list;

	string override_prefix = "";
	if (context.identifier == 'root') {
		override_prefix = " override";
	}

	# if (context.identifier == 'root') {
	# 	if (context.type == 'object_context') {
	# 		push code, "context_value = new DynamicValue(new Dictionary<string, DynamicValue>());";
	# 	} elsif (context.type == 'list_context') {
	# 		push code, "context_value = new DynamicValue(new List<DynamicValue>());";
	# 	} else {
	# 		push code, "context_value = null;";
	# 	}
	# }

	# $code .= "\t\tsay 'in context $context_name';\n"; # DEBUG INLINE TREE BUILDER
	if (is_linear_context) {
		push code, "List<Token> tokens0 = new List<Token>();";
		code = map { "\t$_" } code;

		push code, '';
		list push code, self.compile_syntax_action(0, context.block);
	} else {
		push code, "while (MoreTokens()) {";

		push code, "\tList<Token> tokens0 = new List<Token>();";
		push code, '';
		list push code, self.compile_syntax_action(0, context.block);
		push code, "}";

		push code, "return context_value;";

		code = map { "\t$_" } code;
	}

	list all_code = [];
	push all_code, "public$override_prefix DynamicValue context_$context.identifier (DynamicValue context_value=null) {";
	list push all_code, code;
	push all_code, "}";
	push all_code, "";

	return join '', map { "\t$_\n" } all_code;
}

string sub compile_syntax_condition (tree condition, int offset) {
	# my ($self, $context_type, $condition, $offset) = @_;
	offset = 0 unless offset;
	string switch (condition.type) {
		'function_match': {
			string function = self.get_function_by_name(condition.function);
			if (contains condition.argument) {
				string expression_code = self.compile_syntax_spawn_expression(condition.argument);
				return "$function(tokens_index + $offset, $expression_code)";
			} else {
				return "$function(tokens_index + $offset)";
			}
		}
		'variable_match': {
			if (condition.variable =~ /\A\$(\w++)\Z/s) {
				string variable = self.get_variable(match[1]);
				return "$variable.IsMatch(tokens[tokens_index + $offset].value)";
				# return "tokens[tokens_index + $offset].value =~ /\\A($variable)\\Z/";
			} else {
				self.confess_at_current_line("invalid variable condition value: $condition.variable");
			}
		}
		'regex_match': {
			if (condition.regex =~ /\A\/(.*)\/([msixpodualn]*)\Z/s) {
				return "Regex.IsMatch(\@\"\\A$1\\Z\", tokens[tokens_index + $offset].value)";
			} else {
				self.confess_at_current_line("invalid regex condition value: $condition.regex");
			}
		}
		'string_match': {
			string condition_string;
			if (condition.string =~ /\A'(.*)'\Z/s) {
				condition_string = "\"$1\"";
			} else {
				self.confess_at_current_line("invalid string condition value: $condition.string");
			}
			return "tokens[tokens_index + $offset].value == $condition_string";
		}
		'token_type_match': {
			return "tokens[tokens_index + $offset].type == \"$condition.value\"";
		}
		default: {
			self.confess_at_current_line("invalid syntax condition '$condition.type'");
		}
	}
}

string sub compile_syntax_match_list (tree match_list) {

	list conditions = [];
	list push conditions, match_list.match_conditions;
	list push conditions, match_list.look_ahead_conditons;

	list compiled_conditions = [];
	push compiled_conditions, 'MoreTokens()';

	int i = 0;
	foreach (tree condition in conditions) {
		push compiled_conditions, self.compile_syntax_condition(condition, i);
		i += 1;
	}
	return join ' && ', compiled_conditions;
}

int sub get_syntax_match_list_tokens_eaten (tree match_list) {
	return list length match_list.match_conditions;
}

string sub syntax_match_list_as_string (tree match_list) {
	string conditions_string = join ', ', map { self.syntax_condition_as_string(_) } match_list.match_conditions;

	if (0 < list length match_list.look_ahead_conditons) {
		string look_ahead_string = join ', ', map { self.syntax_condition_as_string(_) } match_list.look_ahead_conditons;
		if (0 < length conditions_string) {
			conditions_string = "$conditions_string, (look-ahead: $look_ahead_string)";
		} else {
			conditions_string = "(look-ahead: $look_ahead_string)";
		}
	}

	conditions_string = conditions_string =~ s/([\\'])/\\$1/g;

	return conditions_string;
}

string sub syntax_condition_as_string (tree condition) {
	string switch (condition.type) {
		'function_match': {
			return "$condition.function";
		}
		'variable_match': {
			return self.get_variable(condition.variable);
		}
		'regex_match': {
			return "$condition.regex";
		}
		'string_match': {
			return "$condition.string";
		}
		'token_type_match': {
			return "$condition.value token";
		}
		default: {
			self.confess_at_current_line("invalid syntax condition '$condition.type'");
		}
	}
}

list sub compile_syntax_action (tree match_list, list actions_list) {
	# my ($self, $context_type, $condition, $actions_list) = @_;

	list code = [];

	# create a new variable scope
	tree previous_variables_scope = self.variables_scope;
	self.variables_scope = clone previous_variables_scope;

	if (match_list) {
		self.tokens_scope_index += 1;
		string previous_tokens_variable = self.get_variable('#tokens');
		string new_tokens_variable = "tokens$self.tokens_scope_index";

		self.variables_scope['#tokens'] = new_tokens_variable;

		int count = self.get_syntax_match_list_tokens_eaten(match_list);
		push code, "List<Token> $new_tokens_variable = new List<Token>($previous_tokens_variable);";
		if (count > 0) {
			push code, "${new_tokens_variable}.AddRange(StepTokens($count));";
		}
	}
	
	foreach (tree action in actions_list) {
		self.current_line = action.line_number;

		string switch (action.type) {
			'push_statement': {
				string expression = self.compile_syntax_spawn_expression(action.expression);
				if (self.current_context.type == 'list_context') {
					push code, "context_value.Add($expression);";
				} else {
					self.confess_at_current_line("use of push in $self.current_context.type");
				}
			}
			'assign_item_statement': {
				string expression = self.compile_syntax_spawn_expression(action.expression);
				if (self.exists_variable(action.variable)) {
					string variable = self.get_variable(action.variable);
					push code, "$variable = $expression;";
				} else {
					string variable = self.add_variable(action.variable);
					push code, "Object $variable = $expression;";
				}
			}
			'assign_field_statement': {
				string key = self.compile_syntax_spawn_expression(action.key);
				string expression = self.compile_syntax_spawn_expression(action.expression);

				string variable = self.get_variable(action.variable);
				push code, "$variable\[$key] = $expression;";
			}
			'assign_array_field_statement': {
				string key = self.compile_syntax_spawn_expression(action.key);
				string expression = self.compile_syntax_spawn_expression(action.expression);

				string variable = self.get_variable(action.variable);
				push code, "$variable\[$key].Add($expression);";
			}
			'assign_object_field_statement': {
				string key = self.compile_syntax_spawn_expression(action.key);
				string subkey = self.compile_syntax_spawn_expression(action.subkey);
				string expression = self.compile_syntax_spawn_expression(action.expression);

				string variable = self.get_variable(action.variable);
				push code, "$variable\[$key][$subkey] = $expression;";
			}
			'return_statement': {
				push code, "return context_value;";
				unless (self.context_default_case) {
					self.context_default_case = [ { type => 'die_statement',
						expression => { type => 'string', string => "'unexpected token'" } } ];
				}
			}
			'return_expression_statement': {
				string expression = self.compile_syntax_spawn_expression(action.expression);
				push code, "return (DynamicValue)($expression);";

				unless (self.context_default_case) {
					self.context_default_case = [ { type => 'die_statement',
						expression => { type => 'string', string => "'unexpected token'" } } ];
				}
			}
			'match_statement': {
				string death_expression;
				if (action.death_expression) {
					death_expression = self.compile_syntax_spawn_expression(action.death_expression);
				} else {
					string match_description = self.syntax_match_list_as_string(action.match_list);
					death_expression = "\"expected $match_description\"";
				}

				string match_expression = self.compile_syntax_match_list(action.match_list);

				push code, "if (!($match_expression)) {";
				push code, "\tConfessAtCurrentOffset($death_expression);";
				push code, "}";

				int count = self.get_syntax_match_list_tokens_eaten(action.match_list);
				if (count > 0) {
					string tokens_variable = self.get_variable('#tokens');
					push code, "${tokens_variable}.AddRange(StepTokens($count));";
				}
			}
			'if_statement': {
				string condition_code = self.compile_syntax_match_list(action.match_list);
				list action_code = self.compile_syntax_action(action.match_list, action.block);

				push code, "if ($condition_code) {";
				list push code, action_code;

				tree branch = action;
				while (contains branch.branch) {
					branch = branch.branch;
					if (branch.type == 'elsif_statement') {
						string condition_code = self.compile_syntax_match_list(branch.match_list);
						list action_code = self.compile_syntax_action(branch.match_list, branch.block);

						push code, "} else if ($condition_code) {";
						list push code, action_code;
					} else {
						list action_code = self.compile_syntax_action(branch.match_list, branch.block);

						push code, "} else {";
						list push code, action_code;
					}
				}
				push code, "}";
			}
			'switch_statement': {
				int first = 1;
				foreach (tree case in action.switch_cases) {
					self.current_line = case.line_number;
					if (case.type == 'match_case') {
						string condition_code = self.compile_syntax_match_list(case.match_list);
						list action_code = self.compile_syntax_action(case.match_list, case.block);

						if (first) {
							push code, "if ($condition_code) {";
							list push code, action_code;
							first = 0;
						} else {
							push code, "} else if ($condition_code) {";
							list push code, action_code;
						}
					} elsif (case.type == 'default_case') {
						list action_code = self.compile_syntax_action(0, case.block);
						push code, "} else {";
						list push code, action_code;
					} else {
						self.confess_at_current_line("invalid switch case type: $case.type");
					}
				}
				push code, "}" unless first;
			}
			'while_statement': {
				string condition_code = self.compile_syntax_match_list(action.match_list);
				list action_code = self.compile_syntax_action(action.match_list, action.block);

				push code, "while ($condition_code) {";
				list push code, action_code;
				push code, "}";
			}
			'warn_statement': {
				string expression = self.compile_syntax_spawn_expression(action.expression);
				push code, "Console.Error.WriteLine($expression);";
			}
			'die_statement': {
				string expression = self.compile_syntax_spawn_expression(action.expression);
				push code, "ConfessAtCurrentOffset($expression);";
			}
			default: {
				die "undefined action '$action.type'";
			}
		}
	}

	# unscope
	self.variables_scope = previous_variables_scope;
	if (self.match_list) {
		self.tokens_scope_index += -1;
	}

	return map { "\t$_" } code;
}

string sub compile_syntax_spawn_expression (tree expression) {
	# my ($self, $context_type, $expression) = @_;

	# say "debug:", Dumper $expression;
	string switch (expression.type) {
		'access': {
			string left = self.compile_syntax_spawn_expression(expression.left_expression);
			string right = self.compile_syntax_spawn_expression(expression.right_expression);
			return "${left}[$right]";
		}
		'undef': {
			return 'null';
		}
		'get_token_line_number': {
			if (expression.token =~ /\A\$(\d+)\Z/s) {
				string tokens_variable = self.get_variable('#tokens');
				return "$tokens_variable\[$1].line_number";
			} else {
				self.confess_at_current_line("invalid spawn expression token: '$expression.token'");
			}
		}
		'get_token_line_offset': {
			if (expression.token =~ /\A\$(\d+)\Z/s) {
				string tokens_variable = self.get_variable('#tokens');
				return "$tokens_variable\[$1].offset";
			} else {
				self.confess_at_current_line("invalid spawn expression token: '$expression.token'");
			}
		}
		'get_token_text': {
			if (expression.token =~ /\A\$(\d+)\Z/s) {
				string tokens_variable = self.get_variable('#tokens');
				return "$tokens_variable\[$1].value";
			} else {
				self.confess_at_current_line("invalid spawn expression token: '$expression.token'");
			}
		}
		'get_context': {
			return "context_value";
		}
		'pop_list': {
			self.confess_at_current_line("pop is unimplemented in csharp");
			# if (self.current_context.type == 'list_context') {
			# 	return "pop \@\$context_value";
			# } else {
			# 	self.confess_at_current_line("use of pop in $self.current_context.type");
			# }
		}
		'call_context': {
			string context = self.get_function_by_name(expression.context);
			if (contains expression.argument) {
				string expression_code = self.compile_syntax_spawn_expression(expression.argument);
				return "$context($expression_code)";
			} else {
				return "$context()";
			}
		}
		'call_function': {
			string function = self.get_function_by_name(expression.function);
			if (contains expression.argument) {
				string expression_code = self.compile_syntax_spawn_expression(expression.argument);
				return "$function($expression_code)";
			} else {
				return "$function()";
			}
		}
		'call_variable': {
			# self.confess_at_current_line("call_variable is unimplemented in csharp");
			string variable = self.get_variable(expression.variable);
			string expression_code = self.compile_syntax_spawn_expression(expression.argument);
			return "$variable($expression_code)";
		}
		'variable_value': {
			string variable = self.get_variable(expression.variable);
			return "$variable";
		}
		'call_substitution': {
			self.confess_at_current_line("call_substitution is unimplemented in csharp");
			# string expression_code = self.compile_syntax_spawn_expression(expression.argument);
			# return "$expression_code =~ ${expression.regex}r";
		}
		'string': {
			if (expression.string =~ /\A'(.*)'\Z/s) {
				return "\"$1\"";
			} else {
				self.confess_at_current_line("invalid string expression value: $expression.string");
			}
		}
		'bareword_string': {
			return "\"$expression.value\"";
		}
		'bareword': {
			return "\"$expression.value\"";
		}
		'empty_list': {
			return 'new DynamicValue(new List<DynamicValue>{})';
		}
		'empty_hash': {
			return 'new DynamicValue(new Dictionary<string, DynamicValue>{})';
		}
		'list_constructor': {
			string code = "new DynamicValue(new List<DynamicValue>{ ";
			foreach (tree field in expression.arguments) {
				string field_expression_code = self.compile_syntax_spawn_expression(field);
				code += "$field_expression_code, ";
			}
			code += "})";
			return code;
		}
		'hash_constructor': {
			string code = "new DynamicValue(new Dictionary<string, DynamicValue>{ ";
			list arguments = expression.arguments;
			list items = clone arguments;
			while (0 < length items) {
				tree field = shift items;
				tree value = shift items;
				string field_expression_code = self.compile_syntax_spawn_expression(field);
				string value_expression_code = self.compile_syntax_spawn_expression(value);
				code += "{$field_expression_code, $value_expression_code}, ";
			}
			code += "})";
			return code;
		}
		default: {
			self.confess_at_current_line("invalid spawn expression: '$expression.type'");
		}
	}
}

void sub main () native:perl5 {{
	my ($files_list) = @_;

	use Data::Dumper;
	use Sugar::IO::File;
	use Sugar::Lang::SugarGrammarParser;
	# use Sugar::Lang::SugarGrammarCompiler;

	my $parser = Sugar::Lang::SugarGrammarParser->new;
	foreach my $file (@$files_list) {
		$parser->{filepath} = Sugar::IO::File->new($file);
		my $tree = $parser->parse;
		# say Dumper $tree;

		my $compiler = Sugar::Lang::SugarGrammarCSharpCompiler->new({syntax_definition_intermediate => $tree});
		$compiler->compile_syntax_intermediate;
		say $compiler->to_package;
	}
}}

}
